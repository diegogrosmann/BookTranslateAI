[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "book-translate-ai"
version = "1.0.0"
description = "AI-powered book translation tool supporting EPUB and PDF formats with intelligent chunking and context preservation."
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
authors = [
    {name = "Diego Grosmann", email = "diego@example.com"}
]
maintainers = [
    {name = "Diego Grosmann", email = "diego@example.com"}
]
keywords = [
    "translation",
    "ai",
    "books",
    "epub",
    "pdf",
    "nlp",
    "machine-translation",
    "llm"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Linguistic",
    "Topic :: Multimedia :: Graphics :: Graphics Conversion",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "litellm>=1.0.0",
    "ebooklib>=0.18",
    "PyPDF2>=3.0.0",
    "beautifulsoup4>=4.12.0",
    "python-docx>=0.8.11",
    "aiofiles>=23.0.0",
    "rich>=13.0.0",
    "click>=8.0.0",
    "pydantic>=2.0.0",
    "tenacity>=8.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
    "mypy>=1.8.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
    "bandit>=1.7.0",
    "pip-audit>=2.6.0",
    "types-beautifulsoup4",
    "types-requests",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.24.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
]

[project.urls]
Homepage = "https://github.com/diegogrosmann/BookTranslateAI"
Documentation = "https://github.com/diegogrosmann/BookTranslateAI#readme"
Repository = "https://github.com/diegogrosmann/BookTranslateAI"
"Bug Tracker" = "https://github.com/diegogrosmann/BookTranslateAI/issues"
Changelog = "https://github.com/diegogrosmann/BookTranslateAI/blob/main/CHANGELOG.md"

[project.scripts]
book-translate = "src.main:main"

[tool.setuptools]
package-dir = {"" = "."}

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]
exclude = ["tests*"]

# Ruff configuration
[tool.ruff]
target-version = "py310"
line-length = 88
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",    # line too long, handled by formatter
    "B008",    # do not perform function calls in argument defaults
    "C901",    # too complex
    "PLR0911", # too many return statements
    "PLR0912", # too many branches
    "PLR0913", # too many arguments
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
    "PLW2901", # redefined loop name
    "ARG002",  # unused method argument
    "SIM102",  # collapsible if
    "PLC0415", # import should be at top level (allow local imports in functions)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101", "ARG", "SIM", "F841"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.isort]
known-first-party = ["src"]

# MyPy configuration
[tool.mypy]
python_version = "3.10"
# Very relaxed settings for initial release - focus on ruff for linting
ignore_errors = true
ignore_missing_imports = true
show_error_codes = false

[[tool.mypy.overrides]]
module = [
    "ebooklib.*",
    "PyPDF2.*",
    "litellm.*",
    "docx.*",
    "reportlab.*",
    "pathvalidate.*",
    "rich.*",
    "click.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "TYPE_CHECKING",
]
show_missing = true
skip_covered = false
precision = 2
fail_under = 40
